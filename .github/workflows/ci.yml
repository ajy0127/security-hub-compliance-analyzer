name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m venv venv
          source venv/bin/activate
          pip install --retries 5 --timeout 60 -r src/requirements.txt
          pip install --retries 5 --timeout 60 pytest pytest-cov
          # Install debug dependencies for testing NIST 800-53 control status
          pip install --retries 5 --timeout 60 -r debug_requirements.txt || echo "Debug requirements file not found"
          
      - name: Setup config directories
        run: |
          mkdir -p config/mappings
          cp -f deployment/config/mappings.json config/mappings/soc2_mappings.json || echo "Mappings file not found in deployment/config/"
          
      - name: Run tests
        run: |
          source venv/bin/activate
          pytest src/tests/ --cov=src --cov-report=xml
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./src/coverage.xml
          fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m venv venv
          source venv/bin/activate
          pip install --retries 5 --timeout 60 flake8 black isort cfn-lint
          
      - name: Lint with flake8
        run: |
          source venv/bin/activate
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv/,build/,dist/,*.egg-info/,debug_*.py,test_*_control_*.py
          
      - name: Check formatting with black
        run: |
          source venv/bin/activate
          black --check ./src ./scripts --exclude="/(\.git|\.hg|\.mypy_cache|\.nox|\.tox|\.venv|_build|buck-out|build|dist|venv|debug_|test_nist_)/"
          
      - name: Check imports with isort
        run: |
          source venv/bin/activate
          isort --check-only --profile black ./src ./scripts --skip venv --skip .git --skip debug_*.py --skip test_*_control_*.py
          
      - name: Setup config directories for linting
        run: |
          mkdir -p config/mappings
          # Create basic config files for testing
          echo '{"frameworks": [{"id": "SOC2", "name": "SOC 2", "description": "SOC 2", "arn": "arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0"}, {"id": "NIST800-53", "name": "NIST 800-53", "description": "NIST 800-53", "arn": "arn:aws:securityhub:us-east-1::standards/nist-800-53/v/5.0.0"}]}' > config/frameworks.json
          echo '{}' > config/mappings/soc2_mappings.json
          echo '{}' > config/mappings/nist800_53_mappings.json
          
          # Create directories for NIST 800-53 control status testing
          mkdir -p templates
          
      - name: Validate CloudFormation template
        run: |
          source venv/bin/activate
          # No need to modify the template since it already has AllowedValues
          cfn-lint deployment/cloudformation.yaml
          
      - name: Validate debug scripts (syntax only)
        run: |
          source venv/bin/activate
          # Check Python syntax without executing
          python -m py_compile debug_email_output.py || echo "Debug script not found or has syntax errors"
          python -m py_compile send_debug_email.py || echo "Debug script not found or has syntax errors"
          python -m py_compile test_nist_control_functions.py || echo "Debug script not found or has syntax errors"
          
          # Check shell script syntax without executing
          bash -n test_nist_direct_controls.sh || echo "Shell script not found or has syntax errors"
          bash -n update_lambda_with_control_status.sh || echo "Shell script not found or has syntax errors"
